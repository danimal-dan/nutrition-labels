AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud Formation template to build and deploy the Vue WebApp, Python Lambda function, and setup an API gateway.
Parameters:
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 93
    MaxLength: 93
    AllowedPattern: '[A-Za-z0-9_]*'
  GitHubOwner:
    Type: String
    Default: danimal-dan
    AllowedPattern: '[A-Za-z0-9-]+'
  GitHubRepo:
    Type: String
    Default: nutrition-labels
    AllowedPattern: '[A-Za-z0-9-]+'
  GitHubBranch:
    Type: String
    Default: main
    AllowedPattern: '[A-Za-z0-9-]+'
Resources:
  NutrionLabelsBuildAndDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - codepipeline.amazonaws.com
              - codebuild.amazonaws.com
              - cloudformation.amazonaws.com
          Action: sts:AssumeRole
  NutrionLabelsBuildAndDeployRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - iam:PassRole
            Resource: '*'
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: '*'
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: '*'
            Effect: Allow
          - Action:
              - cloudwatch:*
              - s3:*
              - cloudformation:*
            Resource: '*'
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: '*'
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: '*'
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: '*'
            Effect: Allow
          - Action:
              - cloudformation:ValidateTemplate
            Resource: '*'
            Effect: Allow
      PolicyName: NutrionLabelsBuildAndDeployRolePolicy
      Roles:
        - !Ref NutrionLabelsBuildAndDeployRole
  NutritionLabelsAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nutrition-labels-app
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
  GeneratePdfLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: GeneratePdfHandler.py
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Code:
        S3Bucket: nutrition-labels-app
        S3Key: generate-pdf-lambda-function.zip
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
  WebAppDistributionOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for accessing S3 bucket content
  WebAppDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - labels.danimaldan.com
        Origins:
          - DomainName: !GetAtt NutritionLabelsAppBucket.DomainName
            Id: NutritionLabelsAppBucketOrigin
            OriginPath: /webapp
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${WebAppDistributionOAI.CloudFrontOriginAccessIdentityId}
          - DomainName: !GetAtt NutritionLabelApiResource.DomainName
            Id: WebAppApiReverseProxy
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: NutritionLabelsAppBucketOrigin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - PathPattern: api/*
            TargetOriginId: WebAppApiReverseProxy
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            ForwardedValues:
              QueryString: true
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:007159692352:certificate/7994172d-190b-4ac9-9445-8d9273081b85
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
  WebAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NutritionLabelsAppBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${WebAppDistributionOAI.CloudFrontOriginAccessIdentityId}
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${NutritionLabelsAppBucket}/webapp/*
  NutritionLabelApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: NutritionLabelApi
  NutritionLabelApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt NutritionLabelApi.RootResourceId
      PathPart: api
      RestApiId: !Ref NutritionLabelApi
  NutritionLabelApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref NutritionLabelApiResource
      RestApiId: !Ref NutritionLabelApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePdfLambdaFunction.Arn}/invocations
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GeneratePdfLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NutritionLabelApi}/*/*/*
  PdfGeneratorLambdaCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: PdfGeneratorLambda
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: LAMBDA_FUNCTION_NAME
            Value: !GetAtt GeneratePdfLambdaFunction.FunctionName
      ServiceRole: !Ref NutrionLabelsBuildAndDeployRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: lambda.buildspec.yaml
      TimeoutInMinutes: 5
  WebAppCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: NutrionLabelsWebApp
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      ServiceRole: !Ref NutrionLabelsBuildAndDeployRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: webapp.buildspec.yaml
      TimeoutInMinutes: 5
  NutritionLabelsCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt NutrionLabelsBuildAndDeployRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref NutritionLabelsAppBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildPdfGeneratorLambda
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: LambdaBuildOutput
              Configuration:
                ProjectName: !Ref PdfGeneratorLambdaCodeBuild
              RunOrder: 1
            - Name: BuildWebApp
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: WebAppBuildOutput
              Configuration:
                ProjectName: !Ref WebAppCodeBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployPdfGeneratorLambda
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: PdfGeneratorLambdaFunctionStack
                TemplatePath: BuildOutput::pdf-generator-lambda-deployment.yaml
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt NutrionLabelsBuildAndDeployRole.Arn
              InputArtifacts:
                - Name: LambdaBuildOutput
              RunOrder: 1
            - Name: DeployWebApp
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !GetAtt NutritionLabelsAppBucket.BucketName
                Extract: true
                ObjectKey: webapp/
              InputArtifacts:
                - Name: WebAppBuildOutput
              RunOrder: 1
  GithubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref NutritionLabelsCodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt NutritionLabelsCodePipeline.Version
Outputs:
  WebAppBucketName:
    Description: Bucket for WebApp hosting
    Value: !Ref NutritionLabelsAppBucket
  CloudFrontDistribution:
    Description: CloudFront Distribution for the WebApp
    Value: !GetAtt WebAppDistribution.DomainName
